"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DEVICE_MODELS = exports.DEVICE_MODELS2 = exports.DeviceModelType = exports.VENDOR_ID = exports.uint8ArrayToDataView = exports.StreamDeckProxy = void 0;
const tslib_1 = require("tslib");
const id_js_1 = require("./id.js");
const original_js_1 = require("./models/original.js");
const mini_js_1 = require("./models/mini.js");
const xl_js_1 = require("./models/xl.js");
const originalv2_js_1 = require("./models/originalv2.js");
const original_mk2_js_1 = require("./models/original-mk2.js");
const plus_js_1 = require("./models/plus.js");
const pedal_js_1 = require("./models/pedal.js");
const neo_js_1 = require("./models/neo.js");
const studio_js_1 = require("./models/studio.js");
tslib_1.__exportStar(require("./types.js"), exports);
tslib_1.__exportStar(require("./id.js"), exports);
tslib_1.__exportStar(require("./controlDefinition.js"), exports);
var proxy_js_1 = require("./proxy.js");
Object.defineProperty(exports, "StreamDeckProxy", { enumerable: true, get: function () { return proxy_js_1.StreamDeckProxy; } });
var util_js_1 = require("./util.js");
Object.defineProperty(exports, "uint8ArrayToDataView", { enumerable: true, get: function () { return util_js_1.uint8ArrayToDataView; } });
/** Elgato vendor id */
exports.VENDOR_ID = 0x0fd9;
var DeviceModelType;
(function (DeviceModelType) {
    DeviceModelType["STREAMDECK"] = "streamdeck";
    DeviceModelType["PEDAL"] = "pedal";
})(DeviceModelType || (exports.DeviceModelType = DeviceModelType = {}));
/** List of all the known models, and the classes to use them */
exports.DEVICE_MODELS2 = {
    [id_js_1.DeviceModelId.ORIGINAL]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x0060],
        factory: original_js_1.StreamDeckOriginalFactory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.MINI]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x0063, 0x0090],
        factory: mini_js_1.StreamDeckMiniFactory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.XL]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x006c, 0x008f],
        factory: xl_js_1.StreamDeckXLFactory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.ORIGINALV2]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x006d],
        factory: originalv2_js_1.StreamDeckOriginalV2Factory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.ORIGINALMK2]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x0080],
        factory: original_mk2_js_1.StreamDeckOriginalMK2Factory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.PLUS]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x0084],
        factory: plus_js_1.StreamDeckPlusFactory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.PEDAL]: {
        type: DeviceModelType.PEDAL,
        productIds: [0x0086],
        factory: pedal_js_1.StreamDeckPedalFactory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.NEO]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x009a],
        factory: neo_js_1.StreamDeckNeoFactory,
        hasNativeTcp: false,
    },
    [id_js_1.DeviceModelId.STUDIO]: {
        type: DeviceModelType.STREAMDECK,
        productIds: [0x00aa],
        factory: studio_js_1.StreamDeckStudioFactory,
        hasNativeTcp: true,
    },
};
/** @deprecated maybe? */
exports.DEVICE_MODELS = Object.entries(exports.DEVICE_MODELS2).map(([id, spec]) => {
    const modelId = id;
    return {
        id: modelId,
        productName: id_js_1.MODEL_NAMES[modelId],
        ...spec,
    };
});
//# sourceMappingURL=index.js.map